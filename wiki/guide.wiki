#summary firefly使用指南
#labels Phase-Support
<wiki:toc max_depth="3" />
= 简介 =
 * firefly是一个追求高性能，精简轻量的应用程序框架
 * 包含IOC容器、Web应用MVC框架等
 * 默认使用Annotation配置方式


= 安装与配置 =
 # 把firefly.jar放入classpath下
 # 在classpath下创建firefly.properties文件
firefly.properties文件例子：
{{{
viewPath = /WEB-INF/page
componentPath = com.test.sample
encoding = UTF-8
}}}
firefly.properties配置说明：
|| * 配置项 * || * 说明 * || * 默认值 * ||
|| componentPath || firefly组件扫描包名，可以用逗号（,）分隔多个包 || 无 ||
|| viewPath （可选） || Web视图模版存储路径 || /WEB-INF/page ||
|| encoding （可选） || Web请求相应的字符集 || UTF-8 ||

= IOC =
[http://baike.baidu.com/view/1486379.htm ioc]为firefly的核心模块，使用类似Spring，默认使用Annotation配置方式，标注的组件生命周期为单例

== 声明一个组件 ==
例子：
{{{
@Component("addService")
public class AddServiceImpl implements AddService {

	@Override
	public int add(int x, int y) {
		return x + y;
	}

}
}}}

== 方法参数注入 ==
例子：
{{{
@Component("methodInject")
public class MethodInjectImpl implements MethodInject {
	private AddService addService;

	@Inject
	public void init(AddService addService) {
		this.addService = addService;
	}
}
}}}

== 属性注入 ==
例子：
{{{
@Component("fieldInject")
public class FieldInjectImpl implements FieldInject {

	@Inject
	private AddService addService;
	@Inject("addService")
	private AddService addService2;

	@Override
	public int add(int x, int y) {
		return addService.add(x, y);
	}

	@Override
	public int add2(int x, int y) {
		return addService2.add(x, y);
	}

}
}}}

= Web框架 =
使用[http://baike.baidu.com/view/31.htm MVC]模式，依赖firefly的ioc模块，默认使用Annotation配置方式
== 配置 ==
在web.xml里面添加前端控制器
{{{
<servlet>
	<servlet-name>fireflyMVC</servlet-name>
	<servlet-class>com.firefly.mvc.web.servlet.DispatcherServlet</servlet-class>
	<!-- <init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			firefly_mvc.properties
		</param-value>
	</init-param> -->
	<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
	<servlet-name>fireflyMVC</servlet-name>
	<url-pattern>/app/*</url-pattern>
</servlet-mapping>
}}}